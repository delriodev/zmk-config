
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOWER_LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
        
        upper: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "UPPER_LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 2>, <&to 2>;
        };
        
        open_par: open_parentheses {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_PARENTHESES";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>;
            mods = <(MOD_LSFT)>;
        };
        close_par: close_parentheses {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_PARENTHESES";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LSFT)>;
        };
        equals: equals {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUALS";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT)>;
        }
        dashes: dashes {
            compatible = "zmk,behavior-mod-morph";
            label = "DASHES";
            #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&kp MINUS>;
            mods = <(MOD_LSFT)>;
        }
        bars: bars {
            compatible = "zmk,behavior-mod-morph";
            label = "BARS";
            #binding-cells = <0>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>
            mods = <(MOD_LSFT)>;
        }
        commas: commas {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAS";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>
            mods = <(MOD_LSFT)>;
        }
        periods: periods {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIODS";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>
            mods = <(MOD_LSFT)>;
        }
        at: at {
            compatible = "zmk,behavior-mod-morph";
            label = "AT";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp POUND>
            mods = <(MOD_LSFT)>;
        }
        math: math {
            compatible = "zmk,behavior-mod-morph";
            label = "MATH";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp PLUS>
            mods = <(MOD_LSFT)>;
        }
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

/* The physical shape of my keyboard after removing keys :

    &magic 2 0 &kp CAPS &none    &none    &none                                                                                            &none &none   &none    &none      
                                                                                                                                                                             
    &upper     &kp Q    &kp G    &kp M    &kp L     &kp W                                                                           &kp B  &kp Y &kp U   &kp V    &at        
    &lower     &kp D    &kp S    &kp T    &kp N     &kp R                                                                           &kp I  &kp A &kp E   &kp O    &kp H      
    &kp TAB    &kp Z    &kp X    &kp C    &kp F     &kp J  &mt LCTRL RET   &kp LGUI ESC  &none        &bars   &kp APOS   &dashes    &kp K  &kp P &commas &periods &kp C_AC_SAVE           
               &kp UP   &kp DOWN &kp LEFT &kp RIGHT        &mt LSHFT SPACE &kp BACKSPACE &mt LALT DEL &equals &open_par  &close_par                                          

C_AS_(CUT|COPY|PASTE|UNDO|REDO|)
*/
    
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&__x__ &magic 2 0 &kp CAPS &none    &kp C_AC_REFRESH &kp C_AC_CLOSE &__x__                                                                          &__x__ &kp C_AL_SELECT_TASK &kp C_AL_WWW &kp C_AL_TEXT_EDITOR &none &none
&__x__ &none      &none    &none    &none            &none          &none                                                                           &none  &none                &none        &none                &none         &none
&__x__ &upper     &kp Q    &kp G    &kp M            &kp L          &kp W                                                                           &kp B  &kp Y                &kp U        &kp V                &at           &none
&__x__ &lower     &kp D    &kp S    &kp T            &kp N          &kp R                                                                           &kp I  &kp A                &kp E        &kp O                &kp H         &none
&__x__ &kp TAB    &kp Z    &kp X    &kp C            &kp F          &kp J  &mt LCTRL RET   &kp LGUI ESC  &none        &bars   &kp APOS   &dashes    &kp K  &kp P                &commas      &periods             &kp C_AC_SAVE &none
&__x__ &none      &kp UP   &kp DOWN &kp LEFT         &kp RIGHT      &__x__ &mt LSHFT SPACE &kp BACKSPACE &mt LALT DEL &equals &open_par  &close_par &__x__ &none                &none        &none                &none         &none
            >;
        };

        layer_Lower {
            bindings = <
&__x__ &trans &none              &none           &none                &none               &__x__                                                          &__x__    &kp C_AL_LOCK &none  &none  &none       &none
&__x__ &trans &none              &none           &none                &none               &none                                                           &none     &none         &none  &none  &none       &none
&__x__ &trans &kp SELECT         &kp C_AC_SEARCH &kp C_AC_INSERT      &none               &none                                                           &kp PLUS  &kp N7        &kp N8 &kp N9 &kp MINUS   &none
&__x__ &to 0  &none              &kp C_AC_GOTO   &kp C_AC_VIEW_TOGGLE &none               &none                                                           &kp STAR  &kp N4        &kp N5 &kp N6 &kp SLASH   &none
&__x__ &trans &kp C_AC_EXIT      &kp C_AC_FIND   &none                &none               &none  &trans &trans &trans   &kp AMPERSAND  &kp GRAVE   &trans &kp EQUAL &kp N1        &kp N2 &kp N3 &kp PERCENT &none
&__x__ &none  &kp C_AC_SCROLL_UP &C_AC_SCROLL_DN &kp C_KBIA_PREV_GRP  &kp C_KBIA_NEXT_GRP &__x__ &trans &trans &trans  &kp LESS_THAN  &kp LBKT &kp RBKT   &__x__    &none         &kp N0 &none  &none       &none
            >;
        };

        layer_Upper {
            bindings = <
&__x__ &trans &none       &none       &none      &none        &__x__                                                         &__x__  &kp PRINTSCREEN &none   &none   &none   &none
&__x__ &trans &none       &none       &none      &none        &none                                                          &trans  &none           &none   &none   &none   &none
&__x__ &to 0  &none       &kp C_PREV  &kp C_NEXT &kp C_PP     &kp C_VOL_UP                                                   &kp F10 &kp F11         &kp F12 &kp F13 &kp F14 &none
&__x__ &trans &none       &none       &none      &kp C_BRI_UP &kp C_VOL_DN                                                   &kp F5  &kp F6          &kp F7  &kp F8  &kp F9  &none
&__x__ &trans &none       &none       &none      &kp C_BRI_DN &kp C_MUTE   &trans &trans &trans  &kp PIPE  &trans   &trans   &kp F1  &kp F2          &kp F3  &kp F4  &none   &none
&__x__ &none  &kp PAGE_UP &kp PAGE_DN &kp HOME   &kp END      &__x__       &trans &trans &trans  &kp CARET &kp FSLH &kp BSLH &__x__  &none           &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
                                                                                                           &bt BT_CLR  &none           &none           &none           &none                                                                                       &none &none &none &none &bt BT_CLR_ALL
       &none       &none           &none           &none           &none           &none                                                                &none  &none &none &none &none &none
       &trans      &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                      &none  &none &none &none &none &none
       &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                      &none  &none &none &none &none &bootloader
       &reset      &none           &none           &none           &none           &none           &bt_2   &bt_3   &none          &none   &none   &none &none  &none &none &none &none &reset
       &none       &none           &none           &none           &none                           &bt_0   &bt_1   &out OUT_USB   &none   &none   &none        &none &none &none &none &none
            >;
        };

    };
};
